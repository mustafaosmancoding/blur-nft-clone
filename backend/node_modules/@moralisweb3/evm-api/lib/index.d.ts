import { ApiModule, Core } from '@moralisweb3/common-core';
import { EndpointWeightsResponseAdapter, RunContractFunctionRequest, RunContractFunctionResponseAdapter, Web3ApiVersionResponseAdapter, GetBlockRequest, GetBlockResponseAdapter, GetDateToBlockRequest, GetDateToBlockResponseAdapter, GetContractEventsRequest, GetContractEventsResponseAdapter, GetContractLogsRequest, GetContractLogsResponseAdapter, GetContractNFTsRequest, GetContractNFTsResponseAdapter, GetMultipleNFTsRequest, GetMultipleNFTsResponseAdapter, GetNFTContractMetadataRequest, GetNFTContractMetadataResponseAdapter, GetNFTContractTransfersRequest, GetNFTContractTransfersResponseAdapter, GetNFTLowestPriceRequest, GetNFTLowestPriceResponseAdapter, GetNFTMetadataRequest, GetNFTMetadataResponseAdapter, GetNFTOwnersRequest, GetNFTOwnersResponseAdapter, GetNFTTokenIdOwnersRequest, GetNFTTokenIdOwnersResponseAdapter, GetNFTTradesRequest, GetNFTTradesResponseAdapter, GetNFTTransfersByBlockRequest, GetNFTTransfersByBlockResponseAdapter, GetNFTTransfersFromToBlockRequest, GetNFTTransfersFromToBlockResponseAdapter, GetNFTTransfersRequest, GetNFTTransfersResponseAdapter, GetWalletNFTCollectionsRequest, GetWalletNFTCollectionsResponseAdapter, GetWalletNFTsRequest, GetWalletNFTsResponseAdapter, GetWalletNFTTransfersRequest, GetWalletNFTTransfersResponseAdapter, ReSyncMetadataRequest, ReSyncMetadataResponseAdapter, SearchNFTsRequest, SearchNFTsResponseAdapter, SyncNFTContractRequest, SyncNFTContractResponseAdapter, GetErc20ApprovalsRequest, GetErc20ApprovalsResponseAdapter, GetErc20BurnsRequest, GetErc20BurnsResponseAdapter, GetErc20TransfersRequest, GetErc20TransfersResponseAdapter, GetErc20MintsRequest, GetErc20MintsResponseAdapter, GetTokenAllowanceRequest, GetTokenAllowanceResponseAdapter, GetTokenMetadataBySymbolRequest, GetTokenMetadataBySymbolResponseAdapter, GetTokenMetadataRequest, GetTokenMetadataResponseAdapter, GetTokenPriceRequest, GetTokenPriceResponseAdapter, GetTokenTransfersRequest, GetTokenTransfersResponseAdapter, GetWalletTokenBalancesRequest, GetWalletTokenBalancesResponseAdapter, GetWalletTokenTransfersRequest, GetWalletTokenTransfersResponseAdapter, GetInternalTransactionsRequest, GetInternalTransactionsResponseAdapter, GetTransactionRequest, GetTransactionResponseAdapter, GetTransactionVerboseRequest, GetTransactionVerboseResponseAdapter, GetWalletTransactionsRequest, GetWalletTransactionsResponseAdapter, GetWalletTransactionsVerboseRequest, GetWalletTransactionsVerboseResponseAdapter, GetNativeBalanceRequest, GetNativeBalanceResponseAdapter, GetNativeBalancesForAddressesRequest, GetNativeBalancesForAddressesResponseAdapter, GetPairAddressRequest, GetPairAddressResponseAdapter, GetPairReservesRequest, GetPairReservesResponseAdapter, ResolveAddressRequest, ResolveAddressResponseAdapter, ResolveDomainRequest, ResolveDomainResponseAdapter, UploadFolderRequest, UploadFolderResponseAdapter } from '@moralisweb3/common-evm-utils';

declare abstract class ClientEvmApi extends ApiModule {
    readonly utils: {
        endpointWeights: () => Promise<EndpointWeightsResponseAdapter>;
        runContractFunction: (request: RunContractFunctionRequest) => Promise<RunContractFunctionResponseAdapter>;
        web3ApiVersion: () => Promise<Web3ApiVersionResponseAdapter>;
    };
    readonly block: {
        getBlock: (request: GetBlockRequest) => Promise<GetBlockResponseAdapter | null>;
        getDateToBlock: (request: GetDateToBlockRequest) => Promise<GetDateToBlockResponseAdapter>;
    };
    readonly events: {
        getContractEvents: (request: GetContractEventsRequest) => Promise<GetContractEventsResponseAdapter>;
        getContractLogs: (request: GetContractLogsRequest) => Promise<GetContractLogsResponseAdapter>;
    };
    readonly nft: {
        getContractNFTs: (request: GetContractNFTsRequest) => Promise<GetContractNFTsResponseAdapter>;
        getMultipleNFTs: (request: GetMultipleNFTsRequest) => Promise<GetMultipleNFTsResponseAdapter>;
        getNFTContractMetadata: (request: GetNFTContractMetadataRequest) => Promise<GetNFTContractMetadataResponseAdapter | null>;
        getNFTContractTransfers: (request: GetNFTContractTransfersRequest) => Promise<GetNFTContractTransfersResponseAdapter>;
        getNFTLowestPrice: (request: GetNFTLowestPriceRequest) => Promise<GetNFTLowestPriceResponseAdapter | null>;
        getNFTMetadata: (request: GetNFTMetadataRequest) => Promise<GetNFTMetadataResponseAdapter | null>;
        getNFTOwners: (request: GetNFTOwnersRequest) => Promise<GetNFTOwnersResponseAdapter>;
        getNFTTokenIdOwners: (request: GetNFTTokenIdOwnersRequest) => Promise<GetNFTTokenIdOwnersResponseAdapter>;
        getNFTTrades: (request: GetNFTTradesRequest) => Promise<GetNFTTradesResponseAdapter>;
        getNFTTransfersByBlock: (request: GetNFTTransfersByBlockRequest) => Promise<GetNFTTransfersByBlockResponseAdapter>;
        getNFTTransfersFromToBlock: (request: GetNFTTransfersFromToBlockRequest) => Promise<GetNFTTransfersFromToBlockResponseAdapter>;
        getNFTTransfers: (request: GetNFTTransfersRequest) => Promise<GetNFTTransfersResponseAdapter>;
        getWalletNFTCollections: (request: GetWalletNFTCollectionsRequest) => Promise<GetWalletNFTCollectionsResponseAdapter>;
        getWalletNFTs: (request: GetWalletNFTsRequest) => Promise<GetWalletNFTsResponseAdapter>;
        getWalletNFTTransfers: (request: GetWalletNFTTransfersRequest) => Promise<GetWalletNFTTransfersResponseAdapter>;
        reSyncMetadata: (request: ReSyncMetadataRequest) => Promise<ReSyncMetadataResponseAdapter>;
        searchNFTs: (request: SearchNFTsRequest) => Promise<SearchNFTsResponseAdapter>;
        syncNFTContract: (request: SyncNFTContractRequest) => Promise<SyncNFTContractResponseAdapter>;
    };
    readonly token: {
        getErc20Approvals: (request: GetErc20ApprovalsRequest) => Promise<GetErc20ApprovalsResponseAdapter>;
        getErc20Burns: (request: GetErc20BurnsRequest) => Promise<GetErc20BurnsResponseAdapter>;
        getErc20Transfers: (request: GetErc20TransfersRequest) => Promise<GetErc20TransfersResponseAdapter>;
        getErc20Mints: (request: GetErc20MintsRequest) => Promise<GetErc20MintsResponseAdapter>;
        getTokenAllowance: (request: GetTokenAllowanceRequest) => Promise<GetTokenAllowanceResponseAdapter>;
        getTokenMetadataBySymbol: (request: GetTokenMetadataBySymbolRequest) => Promise<GetTokenMetadataBySymbolResponseAdapter>;
        getTokenMetadata: (request: GetTokenMetadataRequest) => Promise<GetTokenMetadataResponseAdapter>;
        getTokenPrice: (request: GetTokenPriceRequest) => Promise<GetTokenPriceResponseAdapter>;
        getTokenTransfers: (request: GetTokenTransfersRequest) => Promise<GetTokenTransfersResponseAdapter>;
        getWalletTokenBalances: (request: GetWalletTokenBalancesRequest) => Promise<GetWalletTokenBalancesResponseAdapter>;
        getWalletTokenTransfers: (request: GetWalletTokenTransfersRequest) => Promise<GetWalletTokenTransfersResponseAdapter>;
    };
    readonly transaction: {
        getInternalTransactions: (request: GetInternalTransactionsRequest) => Promise<GetInternalTransactionsResponseAdapter>;
        getTransaction: (request: GetTransactionRequest) => Promise<GetTransactionResponseAdapter | null>;
        getTransactionVerbose: (request: GetTransactionVerboseRequest) => Promise<GetTransactionVerboseResponseAdapter | null>;
        getWalletTransactions: (request: GetWalletTransactionsRequest) => Promise<GetWalletTransactionsResponseAdapter>;
        getWalletTransactionsVerbose: (request: GetWalletTransactionsVerboseRequest) => Promise<GetWalletTransactionsVerboseResponseAdapter>;
    };
    readonly balance: {
        getNativeBalance: (request: GetNativeBalanceRequest) => Promise<GetNativeBalanceResponseAdapter>;
        getNativeBalancesForAddresses: (request: GetNativeBalancesForAddressesRequest) => Promise<GetNativeBalancesForAddressesResponseAdapter>;
    };
    readonly defi: {
        getPairAddress: (request: GetPairAddressRequest) => Promise<GetPairAddressResponseAdapter>;
        getPairReserves: (request: GetPairReservesRequest) => Promise<GetPairReservesResponseAdapter>;
    };
    readonly resolve: {
        resolveAddress: (request: ResolveAddressRequest) => Promise<ResolveAddressResponseAdapter | null>;
        resolveDomain: (request: ResolveDomainRequest) => Promise<ResolveDomainResponseAdapter | null>;
    };
    readonly ipfs: {
        uploadFolder: (request: UploadFolderRequest) => Promise<UploadFolderResponseAdapter>;
    };
}

declare class EvmApi extends ClientEvmApi {
    static readonly moduleName = "evmApi";
    static create(core?: Core): EvmApi;
    private constructor();
    setup(): void;
    start(): void;
}

//# sourceMappingURL=index.d.ts.map

export { EvmApi, EvmApi as default };
